<project name="org.thanlwinsoft.languagetest.build" default="build" basedir=".">
	<!--sets the path of the properties file
	<path id="release.path.rel">
		<pathelement path="${basedir}/../languagetest"/>
	</path>
	<pathconvert refid="release.path.rel" targetos="unix" property="release.path"/> 
	<property name="buildDirectory" value="${release.path}"/>-->
	<property file="build.${osgi.os}.${osgi.arch}.properties"/>
	<property file="build.common.properties" />

	<path id="svnant.class.path">
			<fileset dir="../../org.tigris.subversion.svnant/lib">
				<include name="**/*.jar"/>
			</fileset>
	</path>
	<typedef resource="org/tigris/subversion/svnant/svnantlib.xml" 
			classpathref="svnant.class.path" onerror="fail"/>

	<!--
	<target name="checkout">
		<mkdir dir="${buildDirectory}/features"/>
		<mkdir dir="${buildDirectory}/plugins"/>
		<svn>
			<export srcUrl="${svnUrl}/${svnLanguageTest}/org.apache.xmlbeans"
				destPath="${buildDirectory}/plugins/org.apache.xmlbeans"/>
			<export srcUrl="${svnUrl}/${svnLanguageTest}/org.thanlwinsoft.languagetest"
				destPath="${buildDirectory}/plugins/org.thanlwinsoft.languagetest"/>
			<export srcUrl="${svnUrl}/${svnLanguageTest}/org.thanlwinsoft.languagetest.chart"
				destPath="${buildDirectory}/plugins/org.thanlwinsoft.languagetest.chart"/>
			<export srcUrl="${svnUrl}/${svnLanguageTest}/org.thanlwinsoft.languagetest.cheatsheets"
				destPath="${buildDirectory}/plugins/org.thanlwinsoft.languagetest.cheatsheets"/>

			<export srcUrl="${svnUrl}/${svnLanguageTest}/org.thanlwinsoft.languagetest.feature"
				destPath="${buildDirectory}/features/org.thanlwinsoft.languagetest.feature"/>
			<export srcUrl="${svnUrl}/${svnLanguageTest}/org.thanlwinsoft.languagetest.extra.feature"
				destPath="${buildDirectory}/features/org.thanlwinsoft.languagetest.extra.feature"/>			
            <export srcUrl="${svnUrl}/${svnLanguageTest}/org.thanlwinsoft.languagetest.update/headless-build/maps"
                destPath="${buildDirectory}/maps"/>         
		</svn>
	</target>
	-->
	<pathconvert targetos="unix" property="hg.repository">
			<path location="${buildDirectory}/../"/>
	</pathconvert>
	<target name="clone">
		<mkdir dir="${buildDirectory}"/>
		<exec executable="hg" dir="${buildDirectory}">
			<arg value="clone"/>
			<arg value="${hg.repository}"/>
			<arg value="${buildBase}-${languagetest.version}"/>
		</exec>
	</target>

	<target name="src-tar">
		<tstamp/>
		<!-- exclude external libraries otherwise the tarball gets huge -->
		<tar compression="bzip2" destfile="${buildDirectory}/${buildBase}-${DSTAMP}${TSTAMP}.tar.bz2" longfile="gnu">
			<tarfileset dir="${buildDirectory}/${buildBase}-${languagetest.version}">
				<include name="**/*"/>
				<exclude name=".hg"/>
				<exclude name=".hg/**/*"/>
				<exclude name="org.apache.fop/**/*"/>
				<exclude name="org.apache.xmlbeans/**/*"/>
				<exclude name="org.sil.graphite/**/*"/>
				<exclude name="org.tigris.subversion.svnant/**/*"/>
				<exclude name="org.thanlwinsoft.languagetest.fop/**/*"/>
			</tarfileset>
		</tar>
		<!--
		<tar compression="bzip2" destfile="${buildDirectory}/${buildBase}-${DSTAMP}${TSTAMP}.tar.bz2">
			<tarfileset dir="${buildDirectory}/..">
				<include name="${buildBase}/plugins/**/*"/>
				<include name="${buildBase}/features/**/*"/>
			</tarfileset>
		</tar>
		-->
	</target>

	<target name="split-plugins-features">
		<move todir="${buildDirectory}/features">
		    <fileset dir="${buildDirectory}/${buildBase}-${languagetest.version}">
		    	<include name="org.thanlwinsoft.languagetest*feature*/**/*"/>		    	
			</fileset>
		</move>
		<move todir="${buildDirectory}/plugins">
		    <fileset dir="${buildDirectory}/${buildBase}-${languagetest.version}">
		    	<include name="org.thanlwinsoft.languagetest/**/*"/>
		    	<include name="org.thanlwinsoft.languagetest.chart/**/*"/>
		    	<include name="org.thanlwinsoft.languagetest.cheatsheets/**/*"/>
		    	<include name="org.thanlwinsoft.languagetest.update/**/*"/>
		    	<include name="org.apache.xmlbeans/**/*"/>
			</fileset>
		</move>
		<copy todir="${buildDirectory}">
			<fileset dir="${basedir}/maps">
				<include name="*"/>
			</fileset>
		</copy>
		<delete dir="${buildDirectory}/${buildBase}-${languagetest.version}"/>
	</target>

	<target name="build-schemas" depends="clean,clone,src-tar,split-plugins-features">
		<ant antfile="${buildDirectory}/plugins/org.thanlwinsoft.languagetest/build-xmlbeans.xml"
				dir="${buildDirectory}/plugins/org.thanlwinsoft.languagetest">
		</ant>
	</target>
	<!--
		This target actually executes the PDE Build process by launching the 
		Eclipse antRunner application.
	-->
	<target name="pde-build">
		<concat destfile="${basedir}/build.properties" force="yes">
		    <filelist dir="${basedir}"
		         files="build.features.properties,build.common.properties,build.${osgi.os}.${osgi.arch}.properties"/>
		</concat>
		<echo message="Build Directory: ${buildDirectory}"/>
		<echo message="${baseLocation}/plugins/org.eclipse.equinox.launcher_${equinoxLauncherPluginVersion}.jar"/>
		<java classname="org.eclipse.equinox.launcher.Main" fork="true" failonerror="true">
			<arg value="-application" />
			<arg value="org.eclipse.ant.core.antRunner" />
			<arg value="-buildfile" />
			<arg value="${eclipse.pdebuild.scripts}build.xml" />
			<arg value="-Dtimestamp=${timestamp}" />
			<classpath>
				<pathelement location="${baseLocation}/plugins/org.eclipse.equinox.launcher_${equinoxLauncherPluginVersion}.jar" />
				<fileset dir="${buildDirectory}/plugins/org.apache.xmlbeans/lib">
				     <include name="*.jar"/>
				</fileset>
			</classpath>
		</java>
		<copy file="${basedir}/../site.xml" todir="${buildDirectory}/repository"/>
		<copy file="${basedir}/../index.html" todir="${buildDirectory}/repository"/>
		<copy todir="${buildDirectory}/repository/web">
			 <fileset dir="${basedir}/../web"/>
		</copy>
	</target>

	<target name="pde-product">
		<concat destfile="${basedir}/build.properties" force="yes">
		    <filelist dir="${basedir}"
		         files="build.product.properties,build.common.properties,build.${osgi.os}.${osgi.arch}.properties"/>
		</concat>
		<java classname="org.eclipse.equinox.launcher.Main" fork="true" failonerror="true">
			<arg value="-application" />
			<arg value="org.eclipse.ant.core.antRunner" />
			<arg value="-buildfile" />
			<arg value="${eclipse.pdebuild.scripts}productBuild/productBuild.xml" />
			<arg value="-Dtimestamp=${timestamp}" />
			<classpath>
				<pathelement location="${baseLocation}/plugins/org.eclipse.equinox.launcher_${equinoxLauncherPluginVersion}.jar" />
				<fileset dir="${buildDirectory}/plugins/org.apache.xmlbeans/lib">
				     <include name="*.jar"/>
				</fileset>
			</classpath>
		</java>
	</target>
	
	<target name="add-executables">
		<!-- Not sure why PDE doesn't add these itself, but this hack solves the problem -->
		<zip destfile="${buildDirectory}/I.${languagetest.productName}/${productName}-win32.win32.x86.zip" update="true">
			<zipfileset prefix="eclipse" dir="${baseLocation}/features/org.eclipse.equinox.executable_${equinoxExecutableVersion}/bin/win32/win32/x86">
			    <include name="*"/>
			</zipfileset>
		</zip>
        <zip destfile="${buildDirectory}/I.${languagetest.productName}/${productName}-linux.gtk.x86.zip" update="true">
            <zipfileset prefix="eclipse" dir="${baseLocation}/features/org.eclipse.equinox.executable_${equinoxExecutableVersion}/bin/gtk/linux/x86">
                <include name="*"/>
            </zipfileset>
        </zip>
        <zip destfile="${buildDirectory}/I.${languagetest.productName}/${productName}-linux.gtk.x86_64.zip" update="true">
            <zipfileset prefix="eclipse" dir="${baseLocation}/features/org.eclipse.equinox.executable_${equinoxExecutableVersion}/bin/gtk/linux/x86_64">
                <include name="*"/>
            </zipfileset>
        </zip>
		<unzip src="${buildDirectory}/I.${languagetest.productName}/${productName}-linux.gtk.x86.zip" dest="${buildDirectory}/${productName}-linux.gtk.x86"/>
		<chmod file="${buildDirectory}/${languagetest.productName}-linux.gtk.x86/eclipse/launcher" perm="ugo+rx"/>
		<tar compression="bzip2" destfile="${buildDirectory}/I.${productName}/${productName}-linux.gtk.x86.tar.bz2" longfile="gnu">
			<tarfileset dir="${buildDirectory}/${languagetest.productName}-linux.gtk.x86">
				<include name="**/*"/>
				<exclude name="eclipse/launcher"/>
			</tarfileset>
			<tarfileset dir="${buildDirectory}/${languagetest.productName}-linux.gtk.x86" filemode="755">
				<include name="eclipse/launcher"/>
			</tarfileset>
		</tar>
		<!--<delete file="${buildDirectory}/I.${languagetest.productName}/${productName}-linux.gtk.x86.zip"/>-->
		<delete file="${buildDirectory}/${languagetest.productName}-linux.gtk.x86"/>

		<unzip src="${buildDirectory}/I.${languagetest.productName}/${languagetest.productName}-linux.gtk.x86_64.zip" dest="${buildDirectory}/${productName}-linux.gtk.x86_64"/>
		<chmod file="${buildDirectory}/${languagetest.productName}-linux.gtk.x86_64/eclipse/launcher" perm="ugo+rx" />
		<tar compression="bzip2" destfile="${buildDirectory}/I.${languagetest.productName}/${productName}-linux.gtk.x86_64.tar.bz2" longfile="gnu">
			<tarfileset dir="${buildDirectory}/${languagetest.productName}-linux.gtk.x86_64">
				<include name="**/*"/>
				<exclude name="eclipse/launcher"/>
			</tarfileset>
			<tarfileset dir="${buildDirectory}/${languagetest.productName}-linux.gtk.x86_64" filemode="755">
				<include name="eclipse/launcher"/>
			</tarfileset>
		</tar>
<!--		<delete file="${buildDirectory}/I.${productName}/${productName}-linux.gtk.x86_64.zip"/>-->
		<delete file="${buildDirectory}/${languagetest.productName}"/>

        <unzip src="${buildDirectory}/I.${languagetest.productName}/${languagetest.productName}-win32.win32.x86.zip" dest="${buildDirectory}/${productName}"/>
	</target>
	
	<target name="nsis" description="Build NSIS Installer">
		<path id="nsis.path.rel">
		        <pathelement path="${basedir}/../nsis/LanguageBuddy.nsi"/>
		</path>
		<condition property="nsisPathType" value="windows" else="unix">
			<os family="windows"/>
		</condition>
		<pathconvert refid="nsis.path.rel" targetos="${nsisPathType}" property="nsis.path"/> 
		    
		<exec executable="${nsisPath}" dir="${buildDirectory}"
			logerror="true" output="${buildDirectory}/nsis_win32_x86.log">
			<!--<env key="PATH" path="${signtoolPath}"/>-->
			<arg value="${nsis.path}"/>
		</exec>
		<!--<delete dir="${buildDirectory}/languagetest"/>-->
<!--		
		<exec executable="${signtoolPath}/signtool.exe" dir="${buildDirectory}">
			<arg value="sign"/>
			<arg value="/f"/>
			<arg value="${certs}/code.thanlwinsoft.pfx"/>
			<arg value="/v"/>
			<arg value="/t"/>
			<arg value="http://timestamp.verisign.com/scripts/timestamp.dll"/>
			<arg value="/d"/>
			<arg value="LanguageTest Installer"/>
            <arg value="${buildDirectory}/languagetest-${languagetest.version}.exe"/>
		</exec>
-->
	</target>
	
	<target name="test-installer" description="Test the NSIS Installer">
		<exec executable="${buildDirectory}/languagetest-${languagetest.version}.exe" vmlauncher="false">
		</exec>
	</target>
	
	<!--This target is responsible for cleaning up the build-directory-->
	<target name="clean">
		<delete dir="${buildDirectory}" />
	</target>

	<!--This target defines the run-order of the targets pde-build,-->
	<target name="build" depends="clean,clone,src-tar,build-schemas,pde-product,add-executables,nsis" />
</project>
