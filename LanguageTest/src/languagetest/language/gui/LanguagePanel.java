/*
 * LanguagePanel.java
 *
 * Created on April 13, 2004, 7:20 PM
 */

package languagetest.language.gui;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JComponent;
import javax.swing.DefaultComboBoxModel;
import javax.swing.border.TitledBorder;
import javax.swing.JTextField;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import languagetest.language.test.UniversalLanguage;
import languagetest.language.text.Iso15924;
import languagetest.language.text.Iso3166;
import languagetest.language.text.Iso639;
/**
 *
 * @author  keith
 */
public class LanguagePanel extends javax.swing.JPanel
{
    /**
	 * 
	 */
	private static final long serialVersionUID = 8643119471025607017L;
	/**
	 * 
	 */
	private UniversalLanguage language = null;
    
    /** Creates new form LanguagePanel */
    public LanguagePanel(String title)
    {
        initComponents();
        TitledBorder border = (TitledBorder)this.getBorder();
        border.setTitle(title);
        langCombo.setModel(new DefaultComboBoxModel(Iso639.getLanguages()));
        countryCombo.setModel(new DefaultComboBoxModel(Iso3166.getCountries()));
        scriptCombo.setModel(new DefaultComboBoxModel(Iso15924.getScripts()));
        langCombo.setSelectedIndex(-1);
        countryCombo.setSelectedIndex(-1);
        scriptCombo.setSelectedIndex(-1);
        variantText.setInputVerifier(new LanguagePanel.VariantInputVerifier());
    }
    
    public void setLanguage(UniversalLanguage ul)
    {
        
        Iso639.IsoLanguage l = Iso639.getLanguage(ul.getLanguageCode());
        if (l !=null) langCombo.setSelectedItem(l);
        else langCombo.setSelectedIndex(-1);
        Iso3166.IsoCountry c = Iso3166.getCountry(ul.getCountryCode());
        if (c !=null) countryCombo.setSelectedItem(c);
        else langCombo.setSelectedIndex(-1);
        Iso15924.IsoScript s = Iso15924.getScript(ul.getScriptCode());
        if (s != null) scriptCombo.setSelectedItem(s);
        else langCombo.setSelectedIndex(-1);
        variantText.setText(ul.getVariant()); 
        language = ul;
        langDesc.setText(language.getDescription());
        langCode.setText(language.getCode());
        
    }
    
    public UniversalLanguage getLanguage()
    {
        return language;
    }
    
    protected class VariantInputVerifier extends javax.swing.InputVerifier
    {
        private JComponent lastMsgComponent = null;
        private Pattern pattern = Pattern.compile("[^a-zA-Z0-9_=,.]+");
        public boolean shouldYieldFocus(javax.swing.JComponent input) 
        {
            return check(input);
        }
                
        public boolean verify(javax.swing.JComponent input)
        {
            boolean ok = check(input);
            
            return ok;
        }
        protected boolean check(javax.swing.JComponent input)
        {
            
            if (JTextField.class.isInstance(input))
            {
                String content = ((JTextField)input).getText();
                Matcher m = pattern.matcher(content);
                if (!m.find())
                {
                    lastMsgComponent = null;
                    return true;
                }
                else
                {
                    content = m.replaceAll("");
                    ((JTextField)input).setText(content);
                }
            }
            else
            {
                lastMsgComponent = null;
                return true;
            }
            
            
            if (input != lastMsgComponent) 
            {
                lastMsgComponent = input;
                final JComponent component = input;
                SwingUtilities.invokeLater(new Runnable() 
                {
                    public void run()
                    {
                        JOptionPane.showMessageDialog(component, 
                            "A variant can only contain latin alphanumberic characters [a-zA-Z0-9]");
                    }
                });
            }
            return false;
        }
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents()//GEN-BEGIN:initComponents
    {
        langLabel = new javax.swing.JLabel();
        langCombo = new javax.swing.JComboBox();
        countryLabel = new javax.swing.JLabel();
        countryCombo = new javax.swing.JComboBox();
        variantLabel = new javax.swing.JLabel();
        variantText = new javax.swing.JTextField();
        scriptLabel = new javax.swing.JLabel();
        scriptCombo = new javax.swing.JComboBox();
        descLabel = new javax.swing.JLabel();
        langDesc = new javax.swing.JTextField();
        langCode = new javax.swing.JLabel();

        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.Y_AXIS));

        setBorder(new javax.swing.border.TitledBorder("Choose Language"));
        setMaximumSize(new java.awt.Dimension(200, 500));
        langLabel.setText("Language:");
        add(langLabel);

        langCombo.setToolTipText("[ISO 639 Language] Select the closest match to your language.");
        langCombo.setAlignmentX(0.0F);
        langCombo.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                langComboActionPerformed(evt);
            }
        });

        add(langCombo);

        countryLabel.setText("Country:");
        countryLabel.setToolTipText("Only specify if you want to restrict yourself to the dialect of a specific country");
        add(countryLabel);

        countryCombo.setToolTipText("[ISO-3166 country] Only select if needed.");
        countryCombo.setAlignmentX(0.0F);
        countryCombo.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                countryComboActionPerformed(evt);
            }
        });

        add(countryCombo);

        variantLabel.setText("Variant:");
        add(variantLabel);

        variantText.setToolTipText("Only specify a variant if you need to be more specific than the language and country or your language does not have an ISO 639 code.");
        variantText.setAlignmentX(0.0F);
        variantText.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                variantTextActionPerformed(evt);
            }
        });

        add(variantText);

        scriptLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        scriptLabel.setText("Script:");
        add(scriptLabel);

        scriptCombo.setToolTipText("Select the script that you will use.");
        scriptCombo.setAlignmentX(0.0F);
        scriptCombo.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                scriptComboActionPerformed(evt);
            }
        });

        add(scriptCombo);

        descLabel.setText("Description:");
        add(descLabel);

        langDesc.setEditable(false);
        langDesc.setToolTipText("Name of Native Language");
        langDesc.setAlignmentX(0.0F);
        add(langDesc);

        langCode.setText(" ");
        add(langCode);

    }//GEN-END:initComponents

    private void variantTextActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_variantTextActionPerformed
    {//GEN-HEADEREND:event_variantTextActionPerformed
        setLanguage();
    }//GEN-LAST:event_variantTextActionPerformed

    private void scriptComboActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_scriptComboActionPerformed
    {//GEN-HEADEREND:event_scriptComboActionPerformed
        setLanguage();
    }//GEN-LAST:event_scriptComboActionPerformed

    private void countryComboActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_countryComboActionPerformed
    {//GEN-HEADEREND:event_countryComboActionPerformed
        setLanguage();
    }//GEN-LAST:event_countryComboActionPerformed

    private void langComboActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_langComboActionPerformed
    {//GEN-HEADEREND:event_langComboActionPerformed
        setLanguage();
    }//GEN-LAST:event_langComboActionPerformed
    
    protected void setLanguage()
    {
        String lang = "";
        if (langCombo.getSelectedIndex() > -1)
        {
            lang = ((Iso639.IsoLanguage)langCombo.getSelectedItem()).getCode();
        }
        String country = "";
        if (countryCombo.getSelectedIndex() > -1)
        {
            country = 
                ((Iso3166.IsoCountry)countryCombo.getSelectedItem()).getCode();
        }
        String variant = variantText.getText();
        String script = "";
        if (scriptCombo.getSelectedIndex() > -1)
        {
            script = 
                ((Iso15924.IsoScript)scriptCombo.getSelectedItem()).getCode();
        }
        language = new UniversalLanguage(lang, country, variant, script);
        langDesc.setText(language.getDescription());
        langCode.setText(language.getCode());
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox countryCombo;
    private javax.swing.JLabel countryLabel;
    private javax.swing.JLabel descLabel;
    private javax.swing.JLabel langCode;
    private javax.swing.JComboBox langCombo;
    private javax.swing.JTextField langDesc;
    private javax.swing.JLabel langLabel;
    private javax.swing.JComboBox scriptCombo;
    private javax.swing.JLabel scriptLabel;
    private javax.swing.JLabel variantLabel;
    private javax.swing.JTextField variantText;
    // End of variables declaration//GEN-END:variables
    
}
