/*
 * -----------------------------------------------------------------------
 *  File:          $Source: /home/keith/cvsroot/projects/LanguageAids/uk/co/dabsol/stribley/language/gui/TestSelectionPanel.java,v $
 *  Version:       $Revision: 1.13 $
 *  Last Modified: $Date: 2005/03/25 04:49:25 $
 * -----------------------------------------------------------------------
 *  Copyright (C) 2003 Keith Stribley <jungleglacier@snc.co.uk>
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 * -----------------------------------------------------------------------
 */

package languagetest.language.gui;


import java.util.LinkedList;
import java.util.Iterator;
import java.io.File;
import java.io.FileNotFoundException;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreePath;
import javax.swing.JOptionPane;
import javax.swing.ProgressMonitor;
import javax.swing.SwingUtilities;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JPopupMenu;
import languagetest.language.test.UserConfig;
import languagetest.language.test.TestHistoryStorageException;
import languagetest.language.test.TestItem;
import languagetest.language.test.TestComponent;
import languagetest.language.test.TestType;
import languagetest.language.test.TestModule;
import languagetest.language.test.LanguageConfig;
import languagetest.language.test.UniversalLanguage;
import languagetest.language.test.Test;
import languagetest.language.test.ItemHistory;

/**
 *
 * @author  keith
 */
public class TestSelectionPanel extends javax.swing.JPanel 
    implements TreeSelectionListener
{
    /**
	 * 
	 */
	private static final long serialVersionUID = 8845801644245266826L;
	private MainFrame mainFrame = null;
    private TestHistoryParser historyParser = null;
    private int removedId = 0;
    /** Creates new form TestSelectionPanel */
    public TestSelectionPanel(MainFrame mainFrame)
    {
        this.mainFrame = mainFrame;
        initComponents();
        moduleTree.setModel(mainFrame.getTreeModel());
        moduleTree.addTreeSelectionListener(this);
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents()//GEN-BEGIN:initComponents
    {
        testTypeGroup = new javax.swing.ButtonGroup();
        testContentGroup = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        startButton = new javax.swing.JButton();
        tableButton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        moduleTree = new javax.swing.JTree();
        jPanel2 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        listenButton = new javax.swing.JRadioButton();
        readingButton = new javax.swing.JRadioButton();
        nativeButton = new javax.swing.JRadioButton();
        flipButton = new javax.swing.JRadioButton();
        jPanel10 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        nCombo = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        fCombo = new javax.swing.JComboBox();
        jPanel5 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        revisionTest = new javax.swing.JRadioButton();
        loadedModules = new javax.swing.JRadioButton();
        applyHistory = new javax.swing.JCheckBox();
        repeatErrorsCheckBox = new javax.swing.JCheckBox();
        disableAudio = new javax.swing.JCheckBox();
        jPanel11 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        testSizeLimit = new javax.swing.JComboBox();
        jPanel7 = new javax.swing.JPanel();
        loadModuleButton = new javax.swing.JButton();
        unloadModuleButton = new javax.swing.JButton();
        recentButton = new javax.swing.JButton();
        switchUserButton = new javax.swing.JButton();
        configButton = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        promptLabel = new javax.swing.JTextArea();
        titlePanel = new javax.swing.JPanel();
        titleLabel = new javax.swing.JLabel();

        jLabel1.setText("jLabel1");

        setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        startButton.setText("Start");
        startButton.setToolTipText("Start Test");
        startButton.setEnabled(false);
        startButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                startButtonActionPerformed(evt);
            }
        });

        jPanel1.add(startButton);

        tableButton.setText("Vocab Table");
        tableButton.setToolTipText("Displays the contents of the loaded modules in a sortable table.");
        tableButton.setEnabled(false);
        tableButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                tableButtonActionPerformed(evt);
            }
        });

        jPanel1.add(tableButton);

        editButton.setText("Edit Modules");
        editButton.setToolTipText("Open the Module Editor to create new Test Modules or modify existing ones.");
        editButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                editButtonActionPerformed(evt);
            }
        });

        jPanel1.add(editButton);

        closeButton.setText("Exit");
        closeButton.setToolTipText("Exit Language Test");
        closeButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                closeButtonActionPerformed(evt);
            }
        });

        jPanel1.add(closeButton);

        add(jPanel1, java.awt.BorderLayout.SOUTH);

        jSplitPane1.setDividerSize(5);
        jSplitPane1.setResizeWeight(0.5);
        jScrollPane1.setMinimumSize(new java.awt.Dimension(50, 22));
        moduleTree.setToolTipText("Click on a Test Module to select it.");
        moduleTree.setMinimumSize(new java.awt.Dimension(79, 72));
        jScrollPane1.setViewportView(moduleTree);

        jSplitPane1.setLeftComponent(jScrollPane1);

        jPanel2.setLayout(new javax.swing.BoxLayout(jPanel2, javax.swing.BoxLayout.Y_AXIS));

        jPanel9.setLayout(new javax.swing.BoxLayout(jPanel9, javax.swing.BoxLayout.X_AXIS));

        jPanel9.setAlignmentX(0.0F);
        jPanel4.setLayout(new javax.swing.BoxLayout(jPanel4, javax.swing.BoxLayout.Y_AXIS));

        jPanel4.setBorder(new javax.swing.border.TitledBorder("Test Type"));
        jPanel4.setAlignmentX(0.0F);
        jPanel4.setAlignmentY(0.0F);
        testTypeGroup.add(listenButton);
        listenButton.setText("Listening");
        listenButton.setToolTipText("Listen to the language that you are learning.");
        listenButton.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                listenButtonItemStateChanged(evt);
            }
        });

        jPanel4.add(listenButton);

        testTypeGroup.add(readingButton);
        readingButton.setText("Reading");
        readingButton.setToolTipText("Test your ability to read the language that you are learning.");
        readingButton.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                readingButtonItemStateChanged(evt);
            }
        });

        jPanel4.add(readingButton);

        testTypeGroup.add(nativeButton);
        nativeButton.setText("Speaking / Writing");
        nativeButton.setToolTipText("Translate into the language that you are learning.");
        nativeButton.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                nativeButtonItemStateChanged(evt);
            }
        });

        jPanel4.add(nativeButton);

        testTypeGroup.add(flipButton);
        flipButton.setText("Flash Cards");
        flipButton.setToolTipText("Cycle cards showing both languages together and playing sounds recordings.");
        flipButton.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                flipButtonItemStateChanged(evt);
                jRadioButton1ItemStateChanged(evt);
            }
        });

        jPanel4.add(flipButton);

        jPanel9.add(jPanel4);

        jPanel10.setLayout(new javax.swing.BoxLayout(jPanel10, javax.swing.BoxLayout.Y_AXIS));

        jPanel10.setBorder(new javax.swing.border.TitledBorder("Language Selection"));
        jPanel10.setAlignmentY(0.0F);
        jLabel2.setText("Native or \u2018Bridge\u2019 Language:");
        jLabel2.setAlignmentX(0.5F);
        jLabel2.setAlignmentY(0.0F);
        jPanel10.add(jLabel2);

        nCombo.setToolTipText("The Language that you are already fluent it, that you are using to learn the new language.");
        nCombo.setAlignmentY(0.0F);
        nCombo.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                nComboActionPerformed(evt);
            }
        });

        jPanel10.add(nCombo);

        jLabel3.setText("Language being learnt:");
        jLabel3.setAlignmentX(0.5F);
        jLabel3.setAlignmentY(0.0F);
        jPanel10.add(jLabel3);

        fCombo.setToolTipText("The New Language that you want to learn.");
        fCombo.setAlignmentY(0.0F);
        fCombo.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                fComboActionPerformed(evt);
            }
        });

        jPanel10.add(fCombo);

        jPanel9.add(jPanel10);

        jPanel2.add(jPanel9);

        jPanel5.setLayout(new java.awt.BorderLayout());

        jPanel5.setBorder(new javax.swing.border.TitledBorder("Test Source"));
        jPanel5.setAlignmentX(0.0F);
        jPanel8.setLayout(new javax.swing.BoxLayout(jPanel8, javax.swing.BoxLayout.Y_AXIS));

        jPanel8.setAlignmentY(0.0F);
        jPanel8.setPreferredSize(new java.awt.Dimension(179, 25));
        testContentGroup.add(revisionTest);
        revisionTest.setText("Revision Test");
        revisionTest.setToolTipText("Parse your Test History to determine which Test Items should be retested. This loads the Modules it needs automatically.");
        revisionTest.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                revisionTestItemStateChanged(evt);
            }
        });

        jPanel8.add(revisionTest);

        testContentGroup.add(loadedModules);
        loadedModules.setText("Loaded Modules");
        loadedModules.setToolTipText("Run test on loaded modules only.");
        loadedModules.setAlignmentY(0.0F);
        loadedModules.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                loadedModulesActionPerformed(evt);
            }
        });
        loadedModules.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                loadedModulesItemStateChanged(evt);
            }
        });

        jPanel8.add(loadedModules);

        applyHistory.setSelected(true);
        applyHistory.setText("Apply Test History Rules");
        applyHistory.setToolTipText("The Test History will always be used when generating a revision test. \nThis option forces the history to be checked even when you are just \ntesting the Loaded Modules.");
        jPanel8.add(applyHistory);

        repeatErrorsCheckBox.setSelected(true);
        repeatErrorsCheckBox.setText("Repeat failed tests until correct");
        repeatErrorsCheckBox.setToolTipText("Leave unchecked to run each test once only.");
        jPanel8.add(repeatErrorsCheckBox);

        disableAudio.setText("Disable Audio");
        disableAudio.setToolTipText("Disable playing of audio clips during tests.");
        disableAudio.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                disableAudioActionPerformed(evt);
            }
        });

        jPanel8.add(disableAudio);

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jPanel11.setAlignmentX(0.0F);
        jLabel4.setText("Max number of test items:");
        jLabel4.setToolTipText("Set the maximum number of items in a test");
        jPanel11.add(jLabel4);

        testSizeLimit.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "No limit", "10", "25", "50", "100", "150", "200", "300", "500" }));
        testSizeLimit.setAlignmentX(0.0F);
        jPanel11.add(testSizeLimit);

        jPanel8.add(jPanel11);

        jPanel5.add(jPanel8, java.awt.BorderLayout.CENTER);

        jPanel7.setLayout(new java.awt.GridLayout(5, 1));

        jPanel7.setAlignmentY(0.0F);
        jPanel7.setMinimumSize(new java.awt.Dimension(180, 125));
        jPanel7.setPreferredSize(new java.awt.Dimension(180, 125));
        loadModuleButton.setText("Load Modules...");
        loadModuleButton.setToolTipText("Load modules from file.");
        loadModuleButton.setEnabled(false);
        loadModuleButton.setMinimumSize(new java.awt.Dimension(150, 25));
        loadModuleButton.setPreferredSize(new java.awt.Dimension(150, 25));
        loadModuleButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                loadModuleButtonActionPerformed(evt);
            }
        });

        jPanel7.add(loadModuleButton);

        unloadModuleButton.setText("Unload Module(s)");
        unloadModuleButton.setToolTipText("Unload selected modules. (Hint: Use Ctrl or Shift + Click to select multiple modules)");
        unloadModuleButton.setEnabled(false);
        unloadModuleButton.setMinimumSize(new java.awt.Dimension(150, 25));
        unloadModuleButton.setPreferredSize(new java.awt.Dimension(150, 25));
        unloadModuleButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                unloadModuleButtonActionPerformed(evt);
            }
        });

        jPanel7.add(unloadModuleButton);

        recentButton.setText("Recent Files...");
        recentButton.setToolTipText("Choose from recently loaded files.");
        recentButton.setEnabled(false);
        recentButton.setMinimumSize(new java.awt.Dimension(150, 25));
        recentButton.setPreferredSize(new java.awt.Dimension(150, 25));
        recentButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                recentButtonActionPerformed(evt);
            }
        });

        jPanel7.add(recentButton);

        switchUserButton.setText("Switch User");
        switchUserButton.setToolTipText("Switch to a different User.");
        switchUserButton.setEnabled(false);
        switchUserButton.setMinimumSize(new java.awt.Dimension(150, 25));
        switchUserButton.setPreferredSize(new java.awt.Dimension(150, 25));
        switchUserButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                switchUserButtonActionPerformed(evt);
            }
        });

        jPanel7.add(switchUserButton);

        configButton.setText("User Config");
        configButton.setToolTipText("Change your Language, Test History and other configuration details.");
        configButton.setEnabled(false);
        configButton.setMinimumSize(new java.awt.Dimension(150, 25));
        configButton.setPreferredSize(new java.awt.Dimension(150, 25));
        configButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                configButtonActionPerformed(evt);
            }
        });

        jPanel7.add(configButton);

        jPanel5.add(jPanel7, java.awt.BorderLayout.EAST);

        jPanel2.add(jPanel5);

        jPanel6.setLayout(new java.awt.BorderLayout());

        jPanel6.setBorder(new javax.swing.border.TitledBorder("Help Tip"));
        jPanel6.setAlignmentX(0.0F);
        promptLabel.setBackground(new java.awt.Color(204, 204, 204));
        promptLabel.setEditable(false);
        promptLabel.setFont(new java.awt.Font("Default", 0, 12));
        promptLabel.setLineWrap(true);
        promptLabel.setRows(1);
        promptLabel.setText("Please select the type of test that you want.");
        promptLabel.setWrapStyleWord(true);
        promptLabel.setAlignmentX(0.0F);
        promptLabel.setMaximumSize(null);
        promptLabel.setOpaque(false);
        jPanel6.add(promptLabel, java.awt.BorderLayout.NORTH);

        jPanel2.add(jPanel6);

        jSplitPane1.setRightComponent(jPanel2);

        add(jSplitPane1, java.awt.BorderLayout.CENTER);

        titlePanel.setBackground(javax.swing.UIManager.getDefaults().getColor("InternalFrame.activeTitleBackground"));
        titlePanel.setBorder(new javax.swing.border.EtchedBorder());
        titleLabel.setBackground(new java.awt.Color(102, 204, 255));
        titleLabel.setFont(new java.awt.Font("Dialog", 1, 18));
        titleLabel.setForeground(javax.swing.UIManager.getDefaults().getColor("InternalFrame.activeTitleForeground"));
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLabel.setText("Select type of test");
        titlePanel.add(titleLabel);

        add(titlePanel, java.awt.BorderLayout.NORTH);

    }//GEN-END:initComponents

    private void jRadioButton1ItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_jRadioButton1ItemStateChanged
    {//GEN-HEADEREND:event_jRadioButton1ItemStateChanged
        // Add your handling code here:
    }//GEN-LAST:event_jRadioButton1ItemStateChanged

    private void flipButtonItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_flipButtonItemStateChanged
    {//GEN-HEADEREND:event_flipButtonItemStateChanged
        setStartButtonState();
    }//GEN-LAST:event_flipButtonItemStateChanged

    private void recentButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_recentButtonActionPerformed
    {//GEN-HEADEREND:event_recentButtonActionPerformed
        JPopupMenu popup = 
            UserConfig.getCurrent().getRecentFilesList().getPopup();        
        popup.show(recentButton,0,0);
    }//GEN-LAST:event_recentButtonActionPerformed

    private void fComboActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_fComboActionPerformed
    {//GEN-HEADEREND:event_fComboActionPerformed
        setLanguageConfig();
    }//GEN-LAST:event_fComboActionPerformed

    private void nComboActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_nComboActionPerformed
    {//GEN-HEADEREND:event_nComboActionPerformed
         setLanguageConfig();
    }//GEN-LAST:event_nComboActionPerformed

    protected void setLanguageConfig()
    {
        if (nCombo.getSelectedItem() instanceof UniversalLanguage &&
            fCombo.getSelectedItem() instanceof UniversalLanguage)
        {
            LanguageConfig lc = 
                new LanguageConfig((UniversalLanguage)nCombo.getSelectedItem(), 
                                   (UniversalLanguage)fCombo.getSelectedItem());
            try
            {
                lc.load();
            }
            catch (TestHistoryStorageException e)
            {
                JOptionPane.showMessageDialog(this, e.getLocalizedMessage(),
                    "Error saving history", JOptionPane.WARNING_MESSAGE);
            }
        }
    }
    
    private void disableAudioActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_disableAudioActionPerformed
    {//GEN-HEADEREND:event_disableAudioActionPerformed
        setStartButtonState();
    }//GEN-LAST:event_disableAudioActionPerformed

    private void configButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_configButtonActionPerformed
    {//GEN-HEADEREND:event_configButtonActionPerformed
        setConfig();
    }//GEN-LAST:event_configButtonActionPerformed

    public void setConfig()
    {
        UserConfigDialog dialog = 
            SystemHandler.getInstance().getConfigDialog(mainFrame);
        dialog.setVisible(true);
        mainFrame.setUserName();
        setUserName();
        populateLanguageLists();
    }
    
    public void populateLanguageLists()
    {
        Object [] languages = 
            UserConfig.getCurrent().getNativeLanguages().toArray();
        // change model - remove old elements first for clean garbage collecting
        if (nCombo.getModel() instanceof DefaultComboBoxModel)
        {
            ((DefaultComboBoxModel)nCombo.getModel()).removeAllElements();
        }
        nCombo.setModel(new DefaultComboBoxModel(languages));       
        languages = UserConfig.getCurrent().getForeignLanguages().toArray();
        // change model - remove old elements first for clean garbage collecting
        if (fCombo.getModel() instanceof DefaultComboBoxModel)
        {
            ((DefaultComboBoxModel)fCombo.getModel()).removeAllElements();
        }
        fCombo.setModel(new DefaultComboBoxModel(languages));  
        // set selected to current language config
        if (LanguageConfig.getCurrent() != null)
        {
            nCombo.getModel().setSelectedItem(
                LanguageConfig.getCurrent().getNativeLanguage());
            fCombo.getModel().setSelectedItem(
                LanguageConfig.getCurrent().getForeignLanguage());
            setLanguageNames();
        }
    }
    
    private void loadedModulesActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_loadedModulesActionPerformed
    {//GEN-HEADEREND:event_loadedModulesActionPerformed
        // Add your handling code here:
    }//GEN-LAST:event_loadedModulesActionPerformed

    private void switchUserButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_switchUserButtonActionPerformed
    {//GEN-HEADEREND:event_switchUserButtonActionPerformed
        // Add your handling code here:
        mainFrame.chooseUser();
    }//GEN-LAST:event_switchUserButtonActionPerformed

    public void setUserName()
    {
        if (UserConfig.getCurrent() != null)
        {
            titleLabel.setText(UserConfig.getCurrent().getUserName() +
                " - Select a test");
            loadModuleButton.setEnabled(true);
            recentButton.setEnabled(true);
            switchUserButton.setEnabled(true);
            configButton.setEnabled(true);
            int maxTestItems = UserConfig.getCurrent().getMaxNumTestItems();
            int maxIndex = 0; // 0 is unlimited
            try 
            {
                for (int i=1; i<testSizeLimit.getItemCount(); i++)
                    if (Integer.valueOf(testSizeLimit.getItemAt(i).toString())
                        .intValue() == maxTestItems)
                    {
                        maxIndex = i; 
                        break;
                    }
            }
            catch (NumberFormatException nfe)
            {
                System.out.println(nfe.getLocalizedMessage());
            }
            testSizeLimit.setSelectedIndex(maxIndex);
        }
    }
    
    private void revisionTestItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_revisionTestItemStateChanged
    {//GEN-HEADEREND:event_revisionTestItemStateChanged
        // Add your handling code here:
        setStartButtonState();
    }//GEN-LAST:event_revisionTestItemStateChanged

    private void loadedModulesItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_loadedModulesItemStateChanged
    {//GEN-HEADEREND:event_loadedModulesItemStateChanged
        // Add your handling code here:
        setStartButtonState();
    }//GEN-LAST:event_loadedModulesItemStateChanged

    private void tableButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_tableButtonActionPerformed
    {//GEN-HEADEREND:event_tableButtonActionPerformed
        // Add your handling code here:
        mainFrame.vocabTable();
    }//GEN-LAST:event_tableButtonActionPerformed

    private void nativeButtonItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_nativeButtonItemStateChanged
    {//GEN-HEADEREND:event_nativeButtonItemStateChanged
        // Add your handling code here:
        setStartButtonState();
    }//GEN-LAST:event_nativeButtonItemStateChanged

    private void readingButtonItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_readingButtonItemStateChanged
    {//GEN-HEADEREND:event_readingButtonItemStateChanged
        // Add your handling code here:
        setStartButtonState();
    }//GEN-LAST:event_readingButtonItemStateChanged

    private void listenButtonItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_listenButtonItemStateChanged
    {//GEN-HEADEREND:event_listenButtonItemStateChanged
        // Add your handling code here:
        setStartButtonState();
    }//GEN-LAST:event_listenButtonItemStateChanged

    public void initialise()
    {
        setStartButtonState();
        editButton.setEnabled(true);
        loadModuleButton.setEnabled(true);
    }
    
    public void setStartButtonState()
    {
        if (flipButton.isSelected())
        {
            revisionTest.setEnabled(false);
            loadedModules.setSelected(true);
        }
        else
        {
            revisionTest.setEnabled(true);
        }
        if (disableAudio.isSelected())
        {
            // disable listening test
            if (listenButton.isSelected()) readingButton.setSelected(true);
            listenButton.setEnabled(false);
        }
        else
        {
            listenButton.setEnabled(true);
        }
        switchUserButton.setEnabled(true);
        if (mainFrame.getModules().size()>0)
        {
            tableButton.setEnabled(true);
            unloadModuleButton.setEnabled(true);
        }
        else
        {
            tableButton.setEnabled(false);   
            unloadModuleButton.setEnabled(false);
        }
        if (revisionTest.isSelected())
        {
            applyHistory.setEnabled(false);
            flipButton.setEnabled(false);
            if (getTestType() != null)
            {
                startButton.setEnabled(true);
                promptLabel.setText("Click start to begin the test.");
            }
            else
            {
                startButton.setEnabled(false);
                promptLabel.setText("Please select a Test Type.");                
            }
        }
        else if (loadedModules.isSelected())
        {
            applyHistory.setEnabled(true);
            flipButton.setEnabled(true);
            if (mainFrame.getModules().size()>0)
            {
                if (getTestType() != null)
                {
                    startButton.setEnabled(true);
                    promptLabel.setText("Click start to begin the test.");
                }
                else
                {
                    startButton.setEnabled(false);
                    promptLabel.setText("Please select a Test Type.");                
                }
            }
            else
            {
                startButton.setEnabled(false);
                promptLabel.setText("Please load a module for your test.");  
            }
        }
        else
        {
            applyHistory.setEnabled(true);
            flipButton.setEnabled(true);
            promptLabel.setText("Please select whether you want a test from "
                + "Loaded Modules or a Revision Test.");          
        }
    }
    
    private void unloadModuleButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_unloadModuleButtonActionPerformed
    {//GEN-HEADEREND:event_unloadModuleButtonActionPerformed
        // Add your handling code here:
        synchronized (this)
        {
            TreePath [] paths = moduleTree.getSelectionPaths();
            if (paths != null)
            {
                for (int i=0; i<paths.length; i++)
                {
                    DefaultMutableTreeNode node = (DefaultMutableTreeNode)
                        paths[i].getLastPathComponent();
                    Object testObject = node.getUserObject();
                    if (testObject instanceof TestComponent)
                    {
                        mainFrame.removeModule(((TestComponent)
                            testObject).getModule());
                    }
                    setStartButtonState();
                }
            }            
        }
        UserConfig.getCurrent().getRecentFilesList().refresh();
    }//GEN-LAST:event_unloadModuleButtonActionPerformed

    private void loadModuleButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_loadModuleButtonActionPerformed
    {//GEN-HEADEREND:event_loadModuleButtonActionPerformed
        // Add your handling code here:
        synchronized (this)
        {
            mainFrame.loadModule();
        }
        setStartButtonState();
    }//GEN-LAST:event_loadModuleButtonActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_closeButtonActionPerformed
    {//GEN-HEADEREND:event_closeButtonActionPerformed
        // Add your handling code here:
        mainFrame.confirmExit();
    }//GEN-LAST:event_closeButtonActionPerformed

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_editButtonActionPerformed
    {//GEN-HEADEREND:event_editButtonActionPerformed
        // Add your handling code here:
        mainFrame.editModules(null);
    }//GEN-LAST:event_editButtonActionPerformed

    protected TestType getTestType()
    {
        TestType type = null;
        // Add your handling code here:
        if (listenButton.isSelected())
        {
            type = TestType.LISTENING_FOREIGN_NATIVE;
        }
        else if (readingButton.isSelected())
        {
            type = TestType.READING_FOREIGN_NATIVE;
        }
        else if (nativeButton.isSelected())
        {
            type = TestType.READING_NATIVE_FOREIGN;
        }
        else if (flipButton.isSelected() && flipButton.isEnabled())
        {
            type = TestType.FLIP_CARD;
        }
        return type;
    }
    
    private void startButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_startButtonActionPerformed
    {//GEN-HEADEREND:event_startButtonActionPerformed
        TestType type = getTestType();
        Test theTest = null;
        // if valid type start test
        if (type != null)
        {
            if (loadedModules.isSelected())
            {
                theTest = new Test(mainFrame.getModules(), type, 
                                   repeatErrorsCheckBox.isSelected(),
                                   applyHistory.isSelected());
                startTest(theTest);
            }
            else if (revisionTest.isSelected())
            {
                generateRevisionTestList(type);
            }
            else
            {
                JOptionPane.showMessageDialog
                    (this,"Please choose a Test Source:\n" + 
                     "You can either test yourself on the currently loaded " +
                     "\nmodules or have a revision test.",
                     "Start Test",JOptionPane.INFORMATION_MESSAGE);
                return;
            }
            
        }
        else
        {
            promptLabel.setText("Please select a test type");
        }
    }//GEN-LAST:event_startButtonActionPerformed
    
    protected void setLanguageNames()
    {
        listenButton.setText(TestType.LISTENING_FOREIGN_NATIVE.toString());
        readingButton.setText(TestType.READING_FOREIGN_NATIVE.toString());
        nativeButton.setText(TestType.READING_NATIVE_FOREIGN.toString());  
        listenButton.setToolTipText(TestType.LISTENING_FOREIGN_NATIVE.description());
        readingButton.setToolTipText(TestType.READING_FOREIGN_NATIVE.description());
        nativeButton.setToolTipText(TestType.READING_NATIVE_FOREIGN.description());         
    }
    
    /**
     * This method spawns a thread to scan the history, since it may take 
     * awhile and we don't want to freeze the display.
     */
    protected void generateRevisionTestList(TestType type)
    {
        if (historyParser == null)
        {
            // disable buttons to prevent thread problems
            startButton.setEnabled(false);
            tableButton.setEnabled(false);
            editButton.setEnabled(false);
            loadModuleButton.setEnabled(false);
            unloadModuleButton.setEnabled(false);
            switchUserButton.setEnabled(false);
            UserConfig config = UserConfig.getCurrent();
            ProgressMonitor monitor = new ProgressMonitor(this, 
                "Please wait. Reading test history...",
                "", 0, config.getTestHistory().getModuleCount());
            historyParser = new TestHistoryParser(monitor, type);
            new Thread(historyParser).start();
        }    
        else
        {
            System.out.println("Revision Test already being parsed!");
        }
    }

    protected void startTest(Test theTest)
    {
        // no point running test if it is empty
        if (theTest.getNumTests()>0)
        {
            try 
            {
                int sizeLimit = 
                    Integer.parseInt(testSizeLimit.getSelectedItem().toString());
                if (sizeLimit>0) 
                {
                    theTest.pruneTestToLimit(sizeLimit);
                    UserConfig.getCurrent().setMaxNumTestItems(sizeLimit);
                }
            }
            catch (NumberFormatException e) { System.out.println(e); }
            theTest.setAudioDisabled(disableAudio.isSelected());
            mainFrame.startTest(theTest);
        }
        else
        {
            JOptionPane.showMessageDialog
                (this,
                "There are no test items available for this type of test.\n" +
                "Please change your test options or load another module.",
                 "Start Test",JOptionPane.INFORMATION_MESSAGE);
            initialise(); // reset buttons
        }
    }
    
    /**
     * Method called back by HistoryParser when the parsing is finished 
     */
    protected void startRevisionTest(LinkedList testList)
    {        
        Test theTest = new Test(testList, historyParser.getTestType(), 
                           repeatErrorsCheckBox.isSelected());
        historyParser = null;
        startTest(theTest);
    }
    
    /*
     * Method called from HistoryParser to load the Test Item from the module
     * file referenced in the history.
     * This does not check the items languages directly since the history
     * is already specific to the current language configuration.
     */
    protected synchronized void loadItem(ItemHistory item, 
                                         LinkedList testList, TestType testType)
    {
        TestModule module = null;
        module = mainFrame.getModuleById(item.getModuleId(),
                                         item.getModuleCreationTime());

        if (module == null) // module not loaded, so load it now
        {
            try
            {
                module = new TestModule(item.getModuleFile());
                // check that module matches
                if (module.getCreationTime() != item.getModuleCreationTime() ||
                    module.getUniqueId() != item.getModuleId())
                {
                    System.out.println("ID mismatch: " + 
                        item.getModuleFile().getAbsolutePath() + " " + 
                        module.getCreationTime() + "/" + 
                        item.getModuleCreationTime() + " " +
                        module.getUniqueId() + "/"  + item.getModuleId());
                    // only prompt once for the same module id
                    if (item.getModuleId() != removedId)
                    {
                        int deleteIt = JOptionPane.showConfirmDialog(this, 
                            "The file <" + item.getModuleFile().getAbsolutePath() +
                            "> appears to be a different module to the one used before!\n"
                            + "Delete old history data for previous module (Recommended)?",
                            "Revision Test", 
                            JOptionPane.WARNING_MESSAGE, 
                            JOptionPane.YES_NO_OPTION);
                        if (deleteIt == JOptionPane.YES_OPTION)
                        {
                            // remove node
                            item.removeModuleHistory();
                            removedId = item.getModuleId();
                        }
                    }
                    // set module to null to prevent item being added to test
                    module = null;
                }
                else
                {
                    mainFrame.insertModule(module);
                }
            }
            catch (FileNotFoundException fnfe)
            {
                JOptionPane.showMessageDialog(this, 
                    "The file <" + item.getModuleFile().getAbsolutePath() +
                    "> no longer exists!","Revision Test", 
                    JOptionPane.WARNING_MESSAGE);
                // TBD offer choice to find file
            }      
            catch (TestModule.ParseException pe)
            {
                JOptionPane.showMessageDialog(this, 
                    "There was an error reading the file:\n" + 
                    item.getModuleFile().getAbsolutePath() +
                    "\n" + 
                    pe.getMessage(),"Revision Test", 
                    JOptionPane.WARNING_MESSAGE);
            }
        }
        if (module != null)
        {
            TestItem testItem = 
                module.getItemByCreationTime(item.getCreationTime(), 
                                             item.getCreator());
            
            if (testItem != null)
            {
                if (testType == TestType.LISTENING_FOREIGN_NATIVE && 
                    (testItem.getSoundFile() == null ||
                     !testItem.getSoundFile().exists()))
                {
                    // don't add item for listening test 
                    // if sound file doesn't exist
                    testItem = null;
                }
                else
                {
                    // check test statistics are zero & add item
                    testItem.reset();
                    testList.add(testItem);
                }
            }
            else
            {
                JOptionPane.showMessageDialog(this, 
                    "An item has been removed from \"" + 
                    module.getName() + "\". \n" +
                    "It will be ignored in future tests.","Revision Test", 
                    JOptionPane.WARNING_MESSAGE);
                // set item to ignore to prevent previous tests
                try
                {
                    UserConfig.getCurrent().getTestHistory()
                        .ignoreItem(item, testType, true);
                }
                catch (TestHistoryStorageException thse)
                {
                    // just ignore
                    System.out.println(thse.getMessage());
                }
            }
        }
    }
    
    public void valueChanged(javax.swing.event.TreeSelectionEvent treeSelectionEvent)
    {
        if (treeSelectionEvent.getNewLeadSelectionPath() !=
            treeSelectionEvent.getOldLeadSelectionPath())
        {
            DefaultMutableTreeNode node = (DefaultMutableTreeNode)
                moduleTree.getLastSelectedPathComponent();
        
            if (node == null)
            {
                //selectedModule = null;
                unloadModuleButton.setEnabled(false);
                return;
            }
            Object nodeInfo = node.getUserObject();
            if (nodeInfo.getClass() == TestModule.class) 
            {
                //selectedModule = (TestModule)nodeInfo;
                unloadModuleButton.setEnabled(true);
            }
            else if (nodeInfo.getClass() == TestItem.class)
            {
                //selectedModule = ((TestItem)nodeInfo).getModule();
                unloadModuleButton.setEnabled(true);
            }
            else
            {
                //selectedModule = null;
                unloadModuleButton.setEnabled(false);
            }                
        }
    }    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox applyHistory;
    private javax.swing.JButton closeButton;
    private javax.swing.JButton configButton;
    private javax.swing.JCheckBox disableAudio;
    private javax.swing.JButton editButton;
    private javax.swing.JComboBox fCombo;
    private javax.swing.JRadioButton flipButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JRadioButton listenButton;
    private javax.swing.JButton loadModuleButton;
    private javax.swing.JRadioButton loadedModules;
    private javax.swing.JTree moduleTree;
    private javax.swing.JComboBox nCombo;
    private javax.swing.JRadioButton nativeButton;
    private javax.swing.JTextArea promptLabel;
    private javax.swing.JRadioButton readingButton;
    private javax.swing.JButton recentButton;
    private javax.swing.JCheckBox repeatErrorsCheckBox;
    private javax.swing.JRadioButton revisionTest;
    private javax.swing.JButton startButton;
    private javax.swing.JButton switchUserButton;
    private javax.swing.JButton tableButton;
    private javax.swing.ButtonGroup testContentGroup;
    private javax.swing.JComboBox testSizeLimit;
    private javax.swing.ButtonGroup testTypeGroup;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JPanel titlePanel;
    private javax.swing.JButton unloadModuleButton;
    // End of variables declaration//GEN-END:variables
    
    /** Class for sepearate thread to parse the history */
    protected class TestHistoryParser implements Runnable
    {
        ProgressMonitor monitor = null;
        LinkedList testList = null;
        TestType type = null;
        TestHistoryParser(ProgressMonitor monitor, TestType type)
        {
            this.monitor = monitor;
            this.type = type;
            testList = new LinkedList();
        }
        public TestType getTestType() { return type; }
        public void run()
        {
            UserConfig config = UserConfig.getCurrent();
            int progress = 0;
            File lastModuleFile = null;
            Iterator i = config.getTestHistory().iterator(type);
            
            while (i.hasNext())
            {
                ItemHistory item = (ItemHistory)i.next();
                if (!item.getModuleFile().equals(lastModuleFile))
                {
                    // changed to another module
                    lastModuleFile = item.getModuleFile();
                    final String fileName = lastModuleFile.getName();
                    final int numModulesParsed = ++progress;
                    SwingUtilities.invokeLater(new Runnable()
                    {
                       public void run()
                       {
                            if (monitor != null)
                            {
                                monitor.setNote(fileName);
                                monitor.setProgress(numModulesParsed);
                            }
                       }
                    });
                }

                if (item.isTestDue(type)) 
                {
                    loadItem(item, testList, type);                    
                }
            }
            monitor.close();
            monitor = null; // free up memory  
            final LinkedList finalTestList = testList;
            SwingUtilities.invokeLater(new Runnable()
            {
               public void run()
               {
                   startRevisionTest(finalTestList);
               }
            });
        }
    }
}
