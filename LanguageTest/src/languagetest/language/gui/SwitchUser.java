/*
 * -----------------------------------------------------------------------
 *  File:          $Source: /home/keith/cvsroot/projects/LanguageAids/uk/co/dabsol/stribley/language/gui/SwitchUser.java,v $
 *  Version:       $Revision: 1.8 $
 *  Last Modified: $Date: 2004/12/18 05:10:38 $
 * -----------------------------------------------------------------------
 *  Copyright (C) 2003 Keith Stribley <jungleglacier@snc.co.uk>
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 * -----------------------------------------------------------------------
 */

package languagetest.language.gui;


import java.io.IOException;
import java.net.URL;
import javax.swing.JOptionPane;
import javax.swing.ListModel;
import javax.swing.DefaultListModel;
import java.util.prefs.BackingStoreException;
import languagetest.language.test.UserConfig;
import languagetest.language.test.TestHistoryStorageException;
import languagetest.language.test.LanguageConfig;

/**
 *
 * @author  keith
 */
public class SwitchUser extends javax.swing.JDialog
    implements java.beans.PropertyChangeListener
{
    private MainFrame mainFrame = null;
    private boolean loaded = false;
    /** Creates new form SwitchUser */
    public SwitchUser(java.awt.Frame parent, boolean modal)
    {
        super(parent, modal);
        assert(parent instanceof MainFrame);
        mainFrame = (MainFrame)parent;
        initComponents();
        try 
        {
            promptText.addPropertyChangeListener(this);
            URL url = getClass().getResource("/uk/co/dabsol/stribley/language/text/SwitchUserPrompt.html");
            promptText.setPage(url);
            String [] users = UserConfig.getUsers();
            if (users == null)
            {
                users = new String[1] ;
                users[0] = newUser(System.getProperty("user.name"));
                // initialise config data
                try
                {
                    UserConfig newConfig = new UserConfig(users[0], 
                        new RecentFilesList(mainFrame));
                }
                catch (TestHistoryStorageException e)
                {
                    // its meaningless for a new user anyway
                    System.out.println(e.getMessage());
                }
            }
            userList.setListData(users);            
        }
        catch (BackingStoreException bse)
        {
            JOptionPane.showMessageDialog(this, 
                "Unable to read configuration information\n" +
                "This will prevent test results being saved.\n"+
                "Detailed info follows:\n" + bse.getMessage() ,
                "User Preferences", JOptionPane.ERROR);
        }
        catch (IOException ioe)
        {
            JOptionPane.showMessageDialog(this, 
                ioe.getMessage(),
                "User Preferences", JOptionPane.ERROR);
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */

    private void initComponents()//GEN-BEGIN:initComponents
    {
        jPanel1 = new javax.swing.JPanel();
        newUserButton = new javax.swing.JButton();
        removeUserButton = new javax.swing.JButton();
        okButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        userList = new javax.swing.JList();
        jPanel2 = new javax.swing.JPanel();
        promptText = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Select your User Name");
        addWindowListener(new java.awt.event.WindowAdapter()
        {
            public void windowClosing(java.awt.event.WindowEvent evt)
            {
                closeDialog(evt);
            }
        });

        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        newUserButton.setText("New User");
        newUserButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                newUserButtonActionPerformed(evt);
            }
        });

        jPanel1.add(newUserButton);

        removeUserButton.setText("Remove User");
        removeUserButton.setToolTipText("Remove Selected User");
        removeUserButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                removeUserButtonActionPerformed(evt);
            }
        });

        jPanel1.add(removeUserButton);

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                okButtonActionPerformed(evt);
            }
        });

        jPanel1.add(okButton);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        userList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(userList);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel2.setBorder(new javax.swing.border.TitledBorder("User Name"));
        jPanel2.setPreferredSize(null);
        promptText.setBackground(new java.awt.Color(204, 204, 204));
        promptText.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(1, 1, 1, 1)));
        promptText.setEditable(false);
        promptText.setText("Please select your username");
        promptText.setMaximumSize(null);
        promptText.setOpaque(false);
        jPanel2.add(promptText, java.awt.BorderLayout.SOUTH);

        getContentPane().add(jPanel2, java.awt.BorderLayout.NORTH);

        pack();
    }//GEN-END:initComponents

    private void removeUserButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_removeUserButtonActionPerformed
    {//GEN-HEADEREND:event_removeUserButtonActionPerformed
        String newUser = (String)userList.getSelectedValue();
        if (newUser != null)
        {
            try
            {
                UserConfig.deleteUser(newUser);
                userList.setListData(UserConfig.getUsers());
            }
            catch (BackingStoreException bse)
            {
                JOptionPane.showMessageDialog(this, 
                    "Unable to read configuration information\n" +
                    "This will prevent test results being saved.\n"+
                    "Detailed info follows:\n" + bse.getMessage() ,
                    "User Preferences", JOptionPane.ERROR);
            }
        }
    }//GEN-LAST:event_removeUserButtonActionPerformed

    private void newUserButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_newUserButtonActionPerformed
    {//GEN-HEADEREND:event_newUserButtonActionPerformed
        try 
        {
            String newUser = newUser("");
            if (newUser != null)
            {
                UserConfig newConfig = new UserConfig(newUser,
                    new RecentFilesList(mainFrame));
                ListModel model = userList.getModel();
            }
            userList.setListData(UserConfig.getUsers());
        }
        catch (BackingStoreException bse)
        {
            JOptionPane.showMessageDialog(this, 
                "Unable to read configuration information\n" +
                "This will prevent test results being saved.\n"+
                "Detailed info follows:\n" + bse.getMessage() ,
                "User Preferences", JOptionPane.ERROR_MESSAGE);
        }
        catch (IOException ioe)
        {
            JOptionPane.showMessageDialog(this, 
                ioe.getMessage(),
                "User Preferences", JOptionPane.ERROR_MESSAGE);
        }
        catch (TestHistoryStorageException e)
        {
            JOptionPane.showMessageDialog(this, 
            "Error saving previous users Test History:\n" +
            e.getMessage(),
            "Test History", JOptionPane.WARNING_MESSAGE);
            // proceed with updating model anyway, since
            // this refers to previous user
        }
    }//GEN-LAST:event_newUserButtonActionPerformed

    protected String newUser(String suggestion) throws BackingStoreException
    {
        String newUserName = null;
        boolean valid = false;
        do 
        {
            // Add your handling code here:
            newUserName = JOptionPane.showInputDialog(this,
                "Please enter your name. \n" + 
                "This will be used to store your test results.",
                suggestion);
            if (newUserName == null)
            {
                valid = true; // user canceled so just quietly exit
            }
            else if (newUserName.length() < 1)
            {
                JOptionPane.showMessageDialog(this,
                    "The user name cannot be emtpy. Please try again.",
                    "Invalid name", JOptionPane.WARNING_MESSAGE);
                newUserName = null;
            }
            else if (UserConfig.userExists(newUserName))
            {
                JOptionPane.showMessageDialog(this,
                    "The user \'" + newUserName + 
                    "\' already exists! Please try again.",
                    "Invalid name", JOptionPane.WARNING_MESSAGE);
                newUserName = null;
            }
            else
            {
                valid = true;
            }
            
            
        } while (valid == false);
        return newUserName;
    }
    
    private void okButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_okButtonActionPerformed
    {//GEN-HEADEREND:event_okButtonActionPerformed
        String newUser = (String)userList.getSelectedValue();
        if (newUser != null)
        {
            try
            {
                // unload language config before changing user
                if (LanguageConfig.getCurrent() != null)
                {
                    LanguageConfig.getCurrent().unload();
                }
                UserConfig newConfig = new UserConfig(newUser, 
                    new RecentFilesList(mainFrame));
                newConfig.load();
                this.setVisible(false);
            }
            catch (IOException ioe)
            {
                JOptionPane.showMessageDialog(this, 
                    ioe.getMessage(),
                    "User Preferences", JOptionPane.ERROR_MESSAGE);
            }
            catch (TestHistoryStorageException e)
            {
                JOptionPane.showMessageDialog(this, 
                    "Error saving test history:\n" + 
                    e.getMessage(),
                    "Test History", JOptionPane.ERROR_MESSAGE);
            }
        }
        else
        {
            if (JOptionPane.showConfirmDialog(this, 
                "You must select a user name to continue.",
                "Choose User", JOptionPane.OK_CANCEL_OPTION, 
                JOptionPane.INFORMATION_MESSAGE) ==
                JOptionPane.CANCEL_OPTION)
            {
                // if no user has currently been set then quit on cancel
                if (UserConfig.getCurrent() == null)
                {
                    if (this.getParent() instanceof MainFrame)
                    {
                        ((MainFrame)this.getParent()).close();
                    }
                }
                else // just hide and stick with current user
                {
                    this.setVisible(false);
                }
            }
        }
    }//GEN-LAST:event_okButtonActionPerformed
    
    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt)
    {//GEN-FIRST:event_closeDialog
        
        
        if (UserConfig.getCurrent() == null)
        {
            if (JOptionPane.showConfirmDialog(this, 
                "You must select a user name to continue.",
                "Choose User", JOptionPane.OK_CANCEL_OPTION, 
                JOptionPane.INFORMATION_MESSAGE) ==
                JOptionPane.CANCEL_OPTION)
            {
                // if no user has currently been set then quit on cancel
                if (this.getParent() != null &&
                    this.getParent() instanceof MainFrame)
                {
                    this.dispose();
                    ((MainFrame)this.getParent()).close();
                }
                else
                {
                    this.dispose();
                }
            }
            
        }
        else // just hide and stick with current user
        {
            this.setVisible(false);
        }
    }//GEN-LAST:event_closeDialog
    
    public void setVisibleOnLoad()
    {
        while (!loaded)
        {
            try { Thread.sleep(100); }
            catch (InterruptedException e) {}
        }
        this.getParent().setVisible(true);
        setVisible(true);
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        new SwitchUser(new javax.swing.JFrame(), true).setVisible(true);
    }    
    
    public void propertyChange(java.beans.PropertyChangeEvent evt)
    {
        if (evt.getPropertyName().equals("page"))
        {
            //pack();
            promptText.repaint();
            System.out.println(evt.getPropertyName() + " " + evt.getOldValue() 
                + " -> " + evt.getNewValue());
            loaded = true;
        }
    }    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton newUserButton;
    private javax.swing.JButton okButton;
    private javax.swing.JTextPane promptText;
    private javax.swing.JButton removeUserButton;
    private javax.swing.JList userList;
    // End of variables declaration//GEN-END:variables
    
}
